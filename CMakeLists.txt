cmake_minimum_required(VERSION 3.12)
if(COMMAND CMAKE_POLICY)
  cmake_policy(SET CMP0003 NEW)
  cmake_policy(SET CMP0020 NEW)
  cmake_policy(SET CMP0053 NEW)
endif(COMMAND CMAKE_POLICY)

project(cc_examples)

if(CMAKE_CL_64)
  set(ARCH_DIR "x64")
else(CMAKE_CL_64)
  set(ARCH_DIR "x86")
endif(CMAKE_CL_64)

set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
set(CMAKE_INSTALL_PREFIX "${PROJECT_BINARY_DIR}/dist" CACHE PATH "cc_examples install prefix" FORCE)

if(WIN32)
find_path(FREEIMAGE_INCLUDE_DIR NAMES FreeImage.h PATHS ${PROJECT_SOURCE_DIR}/3rdparty/FreeImage/include)
find_library(FREEIMAGE_FreeImage_LIBRARY NAMES FreeImage PATHS ${PROJECT_SOURCE_DIR}/3rdparty/FreeImage/lib/${ARCH_DIR})
else(WIN32)
find_path(REEIMAGE_INCLUDE_DIR NAMES FreeImage.h PATHS /usr/local/include)
find_library(FREEIMAGE_FreeImage_LIBRARY NAMES freeimage PATHS /usr/local/lib)
endif(WIN32)

if (APPLE AND XCODE)
    set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp -I/usr/local/include" CACHE INTERNAL "OpenMP flags for Xcode toolchain.")
    set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp -I/usr/local/include" CACHE INTERNAL "OpenMP flags for Xcode toolchain.")
    set(OpenMP_CXX_LIB_NAMES "omp" CACHE INTERNAL "OpenMP lib name for Xcode toolchain.")
    set(OpenMP_C_LIB_NAMES "omp" CACHE INTERNAL "OpenMP lib name for Xcode toolchain.")
    set(OpenMP_omp_LIBRARY "/usr/local/lib/libomp.dylib" CACHE INTERNAL "OpenMP lib name for Xcode toolchain.")
endif()

find_package(OpenMP REQUIRED)
if (NOT OPENMP_FOUND)
  message(FATAL_ERROR "Cannot find OpenMP!")
endif (NOT OPENMP_FOUND)  
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")

find_package(FreeImage QUIET)
if (NOT FREEIMAGE_FOUND)
  message(FATAL_ERROR "Cannot find FreeImage!")
endif (NOT FREEIMAGE_FOUND)

find_package(OpenCL QUIET)

find_package(MPI QUIET)

find_package(CUDA QUIET)

#if(NOT GLUT_FOUND)
#  message(FATAL_ERROR "${PROJECT_NAME} requires GLUT.")
#endif(NOT GLUT_FOUND)

include_directories(
  "include"
)

function(add_example EXAMPLE_NAME)
  if(ARGV1)
    set(LIBRARIES ${ARGV})
    list(REMOVE_AT LIBRARIES 0)
  endif(ARGV1)
  add_executable(${EXAMPLE_NAME} src/${EXAMPLE_NAME}.cpp)
  target_link_libraries(${EXAMPLE_NAME} ${LIBRARIES})
  install(TARGETS ${EXAMPLE_NAME} RUNTIME DESTINATION . CONFIGURATIONS Release)  
endfunction(add_example)

function(add_example_withomp EXAMPLE_NAME)
  if(ARGV1)
    set(LIBRARIES ${ARGV})
    list(REMOVE_AT LIBRARIES 0)
  endif(ARGV1)
  add_executable(${EXAMPLE_NAME} src/${EXAMPLE_NAME}.cpp)
  if(APPLE)
    target_link_libraries(${EXAMPLE_NAME} PUBLIC OpenMP::OpenMP_CXX ${LIBRARIES})
  else(APPLE)
    target_link_libraries(${EXAMPLE_NAME} ${LIBRARIES})
  endif(APPLE)
  install(TARGETS ${EXAMPLE_NAME} RUNTIME DESTINATION . CONFIGURATIONS Release)  
endfunction(add_example_withomp)

function(add_cuda_example EXAMPLE_NAME)
  if(ARGV1)
    set(LIBRARIES ${ARGV})
    list(REMOVE_AT LIBRARIES 0)
  endif(ARGV1)
  add_executable(${EXAMPLE_NAME} src/${EXAMPLE_NAME}.cu)
  target_link_libraries(${EXAMPLE_NAME} ${LIBRARIES})
  install(TARGETS ${EXAMPLE_NAME} RUNTIME DESTINATION . CONFIGURATIONS Release)  
endfunction(add_cuda_example)


if(FREEIMAGE_FOUND)
  include_directories(${FREEIMAGE_INCLUDE_DIR})
  add_example(batchresize ${FREEIMAGE_LIBRARIES})
  add_example_withomp(sobel ${FREEIMAGE_LIBRARIES})
  add_example_withomp(sobel_omp ${FREEIMAGE_LIBRARIES})
  if(OpenCL_FOUND)
    include_directories(${OpenCL_INCLUDE_DIRS})
    add_example_withomp(sobel_ocl ${FREEIMAGE_LIBRARIES} ${OpenCL_LIBRARIES})
  endif(OpenCL_FOUND)
  if(MPI_FOUND)
    include_directories(${MPI_CXX_INCLUDE_PATH})
    message(STATUS "MPI_CXX_INCLUDE_PATH: ${MPI_CXX_INCLUDE_PATH}")
    message(STATUS "MPI_CXX_LIBRARIES: ${MPI_CXX_LIBRARIES}")
    add_example(sobel_mpi ${FREEIMAGE_LIBRARIES} ${MPI_CXX_LIBRARIES})
    add_example_withomp(sobel_mpi_omp ${FREEIMAGE_LIBRARIES} ${MPI_CXX_LIBRARIES})
  endif(MPI_FOUND)
  if(CUDA_FOUND)
    enable_language(CUDA)
    add_cuda_example(sobel_cuda ${FREEIMAGE_LIBRARIES})
    if(MPI_FOUND)
      include_directories(${MPI_CXX_INCLUDE_PATH})
      add_cuda_example(sobel_mpi_cuda ${FREEIMAGE_LIBRARIES} ${MPI_CXX_LIBRARIES})
    endif(MPI_FOUND)
  endif(CUDA_FOUND)
endif(FREEIMAGE_FOUND)
